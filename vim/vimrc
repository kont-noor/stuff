" My .vimrc file
"
" Author: Nickolay Kondratenko <devnarkup@gmail.com>
" Raw version: http://raw.github.com/kont-noor/stuff/master/vim/vimrc
"
" Inspired by:
" Vincent Driessen <vincent@datafox.nl> 
" https://raw.github.com/nvie/vimrc/master/vimrc
"
" amix the lucky stiff
" http://amix.dk/vim/vimrc.html
"
" Colorscheme:
" Ethan Schoonover
" https://github.com/altercation/solarized
"
" Feel free to use, modify or share this file 


" ========================================================
" -> General
" ========================================================

set colorcolumn=100

" turn off vi-compatible mode
if &compatible
  set nocompatible
endif

" encoding
set encoding=utf-8
set fileencoding=utf-8

" quantity of lines vim have to remember
set history=500

" includes ftplugin.vim which is responsible for filetype detection
filetype plugin on

" turn indent depend on filetype
filetype plugin indent on

" set syntax highlighting
syntax on

" setting up <leader>
let mapleader=","
let g:mapleader=","


" ========================================================
" -> Colors & Fonts
" ========================================================

if has('gui_running')
  winpos 0 0
  set lines=999 columns=999    " trying to maximize
  set guioptions-=T            " remove toolbar
  set guioptions-=m            " remove menubar
  set guioptions+=LlRrb        " remove
  set guioptions-=LlRrb        " scrollbars
  set guifont=Monaco\ 10       " problem, textmate?
  colorscheme solarized        " awesome colorscheme
  set background=dark          " realy nice :3
else
  set t_Co=256
  colorscheme torte
  set background=dark
endif

" ========================================================
" -> User Interface
" ========================================================

" enables menu at the bottom
set wildmenu
" highlight search
set hlsearch
" do not redraw while running macros
set lazyredraw
" status line google for tokens
set statusline=%f\ %m%r%h%w[%{&ff}]%y[%p%%]
" tab label - #{number} [{filename}] {modified}
set guitablabel=#%N\ [%t]\ %M
" show status even for single buffer displayed
set laststatus=2
" highlight current line
set cursorline
" number rows
set number
" disable welcome message 
set shortmess+=I
" show matching braces
set showmatch
" shows when you are in insert mode
set showmode
" shows commands in right bottom corner 
set showcmd
" show cursor position all the tiem
set ruler
" show title in console status bar
set title
" when I scroll up or down, there are 2 lines between the line I'm on and the bottom or top of the screen. 
set scrolloff=5
" how many tenths of a second to blink on matching brackets
set mat=2


" ========================================================
" -> Behavior & Different Tricks
" ========================================================

" shamelessly taken from YADR dotfile repo https://github.com/skwp/dotfiles
" stuff to ignore whent tab completing
set wildignore=*.o,*.obj,*~ 
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=log/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif
" W invokes sudo
command W w !sudo tee % > /dev/null
" copying to clipboard
set clipboard=autoselect,unnamed,exclude:cons\|linux
" dunno
set matchtime=2
" force backspace to behave like in any other editor
set backspace=2
" editor will start searching when you type the first character of the search string
set incsearch
" turn off visualbell
set novisualbell
" no ~ backup files
set nobackup
set nowb
set noswapfile
" doesn't select lines number in vim
set mouse=a
" show whitespace characters
set list listchars=tab:→\ ,trail:·


" ========================================================
" -> Indentations
" ========================================================

" automatically inserts one extra level of indentation in some cases
set smartindent
" affects how <TAB> key presses are interpreted depending on where the cursor is
set smarttab
" tab counts as 4 columns
set tabstop=4
" numbers of spaces to (auto)indent
set shiftwidth=4


" ========================================================
" -> Filetype Dependent Settings
" ========================================================

if has("autocmd")
  " Filetype matches:
  " *.phtml => html
  autocmd BufNewFile,BufRead *.phtml set filetype=html

  " *.erb => html
  autocmd BufNewFile,BufRead *.erb set filetype=html

  " *.haml => haml
  autocmd BufNewFile,BufRead *.haml set filetype=haml

  " feature => ruby
  autocmd BufNewFile,BufRead *.feature setlocal filetype=ruby

  " Gemfile => ruby
  autocmd BufNewFile,BufRead Gemfile,Vagrantfile setlocal filetype=ruby

  " Filetype rules:
  " YAML
  autocmd FileType yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2

  " HAML
  autocmd FileType haml setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  " jade
  autocmd FileType jade setlocal autoindent expandtab shiftwidth=2 softtabstop=2

  augroup html_files "{{{
    au!
    " TODO: make closetag here
    " autocmd filetype html,xhtml,xml source ~/.vim/scripts/closetag.vim
    autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  augroup end " }}}

  augroup ruby_files "{{{
    au!
    autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2
  augroup end " }}}

  augroup css_files "{{{
    au!
    autocmd filetype css,less setlocal foldmethod=marker foldmarker={,}
  augroup end "}}}

  augroup javascript_files "{{{
    au!
    autocmd filetype js,coffee setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 tabstop=2
  augroup end "}}}
endif


" ========================================================
" -> Hotkeys & Bindings
" ========================================================

" make p in visual mode replace the selected text with the yank register
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" to save session
autocmd VIMEnter * if !argc() | :source ~/.session.vim | endif
autocmd VIMLeave * :mksession! ~/.session.vim

" C-Space for autocomplete
if has("gui")
    " C-Space seems to work under gVim on both Linux and win32
    inoremap <C-Space> <C-n>
else " no gui
  if has("unix")
    inoremap <Nul> <C-n>
  else
  " I have no idea of the name of Ctrl-Space elsewhere
  endif
endif

" swtich between buffers by arrows
nmap <silent> <Up> :wincmd k<CR>
nmap <silent> <Down> :wincmd j<CR>
nmap <silent> <Left> :wincmd h<CR>
nmap <silent> <Right> :wincmd l<CR>

" change size of vsplited buffers by <Alt> + arrows
map <A-Left> <C-W><
map <A-Right> <C-W>>

" bash like keys for the command line
cnoremap <C-A> <Home>
cnoremap <C-E> <End>

" ; = :
nnoremap ; :

" close buffer by Q
nmap Q :q!<CR>

" new tab by F1
nmap <F1> :tabnew<CR>
imap <F1> <ESC> :tabnew<CR>
vmap <F1> :tabnew<CR>

" vertical split by F2
nmap <silent> <F2> :vsplit<CR>
imap <F2> <ESC> :vsplit<CR>
vmap <F2> :vsplit<CR>

" horisontal split by F3
nmap <silent> <F3> :split<CR>
imap <F3> <ESC> :split<CR>
vmap <F3> :split<CR>

" folding by F4
nnoremap <F4> za

" leader + a to copy all text from current buffer
nmap <leader>a :%y+ <CR>

" leader + , to launch NERDTree
nmap <leader>, :NERDTree <CR>

" leader + z to zencode
nmap <leader>z <C-y>, <CR>

" leader + m to MRU
nmap <silent> <leader>m :MRU<CR>

" when pressing <leader>cd switch to the directory of the open buffer
map <leader>cd :cd %:p:h<cr>

" switching between tabs
nmap <silent> <Tab> :tabnext<CR>
nmap <silent> <S-Tab> :tabprevious<CR>

" remove search highlight
nmap <silent> <C-N> :silent noh<CR>

" Search mappings: These will make it so that going to the next one in a
" search will center on the line it's found in.
map N Nzz
map n nzz

" Disable fucking paste by accidental wheel click
map <MiddleMouse> <Nop>
imap <MiddleMouse> <Nop>
map <2-MiddleMouse> <Nop>
imap <2-MiddleMouse> <Nop>

" Smart home button
noremap <expr> <silent> <Home> col('.') == match(getline('.'),'\S')+1 ? '0' : '^'
imap <silent> <Home> <C-O><Home>

" mode indication - prominent!
function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi statusline guibg=red
    set cursorcolumn
  elseif a:mode == 'r'
    hi statusline guibg=blue
  else
    hi statusline guibg= magenta
  endif
endfunction

function! InsertLeaveActions()
  hi statusline guibg=green
  set nocursorcolumn
endfunction

"au InsertEnter * call InsertStatuslineColor(v:insertmode)
"au InsertLeave * call InsertLeaveActions()

" to handle exiting insert mode via a control-C
inoremap <c-c> <c-o>:call InsertLeaveActions()<cr><c-c>

" default the statusline to green when entering Vim
hi statusline guibg=green
